enum asset_type_id
{
    Asset_None,
    
    Asset_Shadow,
    Asset_Tree,
    Asset_Sword,
//    Asset_Stairwell,
    Asset_Rock,

    Asset_Grass,
    Asset_Tuft,
    Asset_Stone,

    Asset_Head,
    Asset_Cape,
    Asset_Torso,
    
    Asset_Count,
};


asset_type => the big categorizer
    tree
    sword
    hero

asset_tag => asset properties
    direction facing, etc.

--- The tags array is just a global list of all the possible tags. 
    uint32 TagCount;
    asset_tag *Tags;
    struct asset_tag{
        uint32 ID; // NOTE(casey): Tag ID
        real32 Value;
    };
    enum asset_tag_id
    {
        Tag_Smoothness,
        Tag_Flatness,
        Tag_FacingDirection, // NOTE(casey): Angle in radians off of due right
        
        Tag_Count,
    };

--- USAGE:
BeginAssetType(Assets, Asset_Head);
AddBitmapAsset(Assets, "test/test_hero_right_head.bmp");
AddBitmapAsset(Assets, "test/test_hero_back_head.bmp");
AddBitmapAsset(Assets, "test/test_hero_left_head.bmp");
AddBitmapAsset(Assets, "test/test_hero_front_head.bmp");
AddTag(Assets, Tag_FacingDirection, AngleFront); // Example
EndAssetType(Assets);

bitmap_id = GetBestMatchBitmap(Type, MatchVector, WeightVector);
GetBitmapID();
PushBitmap(Group, bitmap_id, pos, dim); -> if not available call LoadBitmap() in game assets
    loaded_bitmap* GetBitmap();
    DrawBitmap();